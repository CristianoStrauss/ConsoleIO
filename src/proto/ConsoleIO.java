/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ConsoleIO.java
 *
 * Created on 22/11/2011, 20:45:30
 */
package proto;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Cristiano
 */
public class ConsoleIO extends javax.swing.JFrame {

    private static void teste_v01() throws InterruptedException, IOException {
        Process windowsCLI;
        ProcessBuilder pb = new ProcessBuilder("cmd.exe", "/k", "type", "teste.txt");
        System.out.println("Pausa para observar cmd: antes de iniciar");
//        Thread.sleep(10000);
        windowsCLI = pb.start();
        System.out.println("Pausa para observar cmd: retorno da pausa depois de iniciar");
//        Thread.sleep(10000);
        BufferedReader reader = new BufferedReader(new InputStreamReader(windowsCLI.getInputStream()));
//        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(windowsCLI.getOutputStream()));
        if (!reader.ready()) {
            Thread.sleep(30);
        }
        String line = "";
        boolean started = false, exit = false;
        final StringBuilder sb = new StringBuilder();
        while (line != null) {
            if (started) { 
                sb.append(line).append("\r\n");
            }
            if (!reader.ready()) {
                reader.wait(100);
                continue;
            }
            System.out.println("avail="+windowsCLI.getInputStream().available());
            System.out.println("text.size="+line.length());
//            if (windowsCLI.getInputStream().available() == 0)
//                break;
            if (exit) 
                break;
            line = reader.readLine();
            exit = "".equals(line) || line == null;
            started = true;
        }
        
        System.out.println(sb.toString());
        reader.close();
        windowsCLI.getOutputStream().close();
        
        System.out.println("Pausa para observar cmd");
        Thread.sleep(10000);
    }

    private static void teste_v02() throws InterruptedException, IOException {
        Process windowsCLI;
        ProcessBuilder pb = new ProcessBuilder("cmd.exe");
        windowsCLI = pb.start();
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(windowsCLI.getOutputStream()));
        writer.append("cd\r\n");
        writer.append("dir\r\n");
        writer.append("echo 'FIM'\r\n");
        writer.flush();
        BufferedReader reader = new BufferedReader(new InputStreamReader(windowsCLI.getInputStream()));
        if (!reader.ready()) {
            Thread.sleep(30);
        }
        String line = "";
        boolean started = false, exit = false;
        final StringBuilder sb = new StringBuilder();
        while (line != null) {
            if (started) { 
                sb.append(line).append("\r\n");
            }
            if (!reader.ready()) {
                reader.wait(100);
                continue;
            }
            System.out.println("avail="+windowsCLI.getInputStream().available());
            System.out.println("text.size="+line.length());
//            if (windowsCLI.getInputStream().available() == 0)
//                break;
            if (exit) 
                break;
            line = reader.readLine();
            exit = line == null || line.contains("FIM") ;
            started = true;
        }
        
        System.out.println(sb.toString());
        reader.close();
        writer.close();
        
        System.out.println("Pausa para observar cmd");
        Thread.sleep(10000);
    }
    private Process windowsCLI;

    /** Creates new form ConsoleIO */
    public ConsoleIO() throws IOException {
        initComponents();
        
        ProcessBuilder pb = new ProcessBuilder("cmd.exe");
        windowsCLI = pb.start();
        BufferedReader reader = new BufferedReader(new InputStreamReader(windowsCLI.getInputStream()));
        String line = reader.readLine();
        final StringBuilder sb = new StringBuilder();
        while (line != null) {
            sb.append(line);
            line = reader.readLine();
        }
        
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                jTextPane1.setText(sb.toString());
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jScrollPane1.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try {
            // TODO add your handling code here:
                windowsCLI.getInputStream().close();
                windowsCLI.getOutputStream().close();
        } catch (IOException ex) {
            Logger.getLogger(ConsoleIO.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        teste_v02();
        
        if (1==0) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsoleIO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsoleIO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsoleIO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsoleIO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    new ConsoleIO().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(ConsoleIO.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables
}
